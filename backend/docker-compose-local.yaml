services:
  app:
    build:
      # Send everything in the current directory (python-full-stack/) to the Docker daemon.
      context: ../
      dockerfile: backend/Dockerfile
    # ports:
    #   - "8000:8000"
    volumes:
      - ../backend/database:/app/backend/database # Ensure SQLite .db file persists
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    expose:
      - "8000" # Exposes port *internally* to Nginx only
  
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    depends_on:
      - app
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/app/backend/static:ro



# volumes:
#  - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
# Docker does not copy the file from your local machine into the image.
# Instead, Docker mounts the file at runtime, meaning:
  # The container sees your local file as if it were a native file inside its filesystem.




# context: ../
# The build.context in a docker-compose.yml file is crucial 
# because it tells Docker what files to send to the Docker engine when building your image.
# This tells Docker:

# Use the root python-full-stack/ directory as context (where pyproject.toml, etc. live)

# Use the Dockerfile inside backend/


# "8000:8000"
# ⬆️   ⬇️
# |   └── Port inside the container (where your FastAPI app is running)
# └────── Port on your local machine (host)


# Binds local DB directory into container
#./backend/database:/app/backend/database
# ⬆️   ⬇️
# |   └──  Container Path (where your FastAPI app is running)
# └──────  your local machine path (host)


